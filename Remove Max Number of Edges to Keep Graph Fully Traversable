class Solution:
    def maxNumEdgesToRemove(self, n: int, edges: List[List[int]]) -> int:
        
        def find(n1, par):
            if par[n1] != n1:
                par[n1] = find(par[n1], par)
            return par[n1]

        def union(n1, n2, par, rank):
            p1, p2 = find(n1, par), find(n2, par)
            if p1 == p2:
                return False
            if rank[p2] > rank[p1]:
                par[p1] = p2
                rank[p2] += rank[p1]
            else:
                par[p2] = p1
                rank[p1] += rank[p2]
            return True
        
        edges.sort(reverse = True)
        par = [i for i in range(n)]
        rank = [1 for _ in range(n)]
        used = set()

        for i,(z,x,y) in enumerate(edges):
            if z == 2 or z == 3:
                if union(x - 1, y - 1, par, rank):
                    used.add(i)

        if len(set(find(i, par) for i in range(n))) != 1:
            return -1

        par = [i for i in range(n)]
        rank = [1 for _ in range(n)]

        for i,(z,x,y) in enumerate(edges):
            if z == 1 or z == 3:
                if union(x - 1, y - 1, par, rank):
                    used.add(i)

        if len(set(find(i, par) for i in range(n))) != 1:
            return -1

        return len(edges) - len(used)
